<Grid
        Margin="50 25">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>



        <DataGrid ItemsSource="{Binding DataSource}"
                  SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
                  IsReadOnly="True"
                  Grid.Row="0"
                  Grid.Column="0">

        </DataGrid>



        <StackPanel IsEnabled="{Binding IsExportEnabled}"
                    Margin="15"
                    Grid.Column="1"
                    Orientation="Vertical">

            <Button Content="Create"
                    Width="100"
                    Command="{Binding CreateCommand}"
                    />



        </StackPanel>



    </Grid>
	
	
	using GUI.Commands;
using GUI.View;
using Core.Models;
using System;
using System.Collections.Generic;
using System.Text;
using Core.Encoding;
using System.Windows.Media;
using Data;
using Data.Models;
using System.IO;
using ExcelDataReader;

namespace GUI.ViewModel
{
    public class VModel
        : BaseViewModel
    {
        private readonly IQREncoder<YardItem> _qRSerialiser = new ZXingQREncoder<YardItem>();

        private object _selectedItem;


        public VModel()
        {
            //DataSource = new List<YardItem>()
            //{
            //    new YardItem(Guid.Parse("0a3f673f-4ba4-4458-a266-4a1967f84aa3")) { Zone = "A2", BoatClass = BoatClass.Falcon, Owner = "Bob Jones" },
            //    new YardItem(Guid.Parse("58de5eac-5d74-49d8-91b0-3fb148c58b39")) { Zone = "B13", BoatClass = BoatClass.Laser, Owner = "Rob Jones", DueDate = DateTime.Now.AddDays(1) },
            //    new YardItem(Guid.Parse("82253571-c5f4-42f2-81e3-20aaa0f3551c")) { Zone = "C8", BoatClass = BoatClass.GP14, Owner = "Paul Jones" },
            //    new YardItem(Guid.Parse("b8ae8d13-fd78-460b-ab83-e26ac0540afe")) { Zone = "D2", BoatClass = BoatClass.Falcon, Owner = "Jeff Jones", DueDate = DateTime.Now.AddDays(16) },
            //    new YardItem() { Zone = "E2", BoatClass = BoatClass.GP14, Owner = "Obi Wan Jones", DueDate = DateTime.Now.AddDays(1) },
            //    new YardItem() { Zone = "F12", BoatClass = BoatClass.Laser, Owner = "Indiana Jones" }
            //};

            using (var stream = File.Open(@"C:\WKSC_SCNR\Book1.xlsx", FileMode.Open, FileAccess.Read))
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    var res = reader.AsDataSet();
                    DataSource = res;
                }
            }

            //var adapter = new AdapterCSV<YardItem>(new YardItemCSVSchema());

            //adapter.ReadCSV(@"C:\WKSC_SCNR\Dinghy storage 2020 Euan.xlsx");


        }

        private YardItem SelectedYardItem => SelectedItem as YardItem;


        private Command OnCreateCommand()
        {
            return new Command((x) =>
            {
                var bmp = _qRSerialiser.Encode(SelectedYardItem);


                if (bmp != null)
                {
                    var win = new ExportItemsPage(bmp.ToBitmapImage());
                    win.ShowDialog();
                }
            });
        }


        public Command CreateCommand { get => OnCreateCommand(); }


        public object SelectedItem
        {
            get => _selectedItem;
            set
            {
                SetProperty(ref _selectedItem, value);
                OnPropertyChanged(nameof(IsExportEnabled));
            }

        }
        public System.Data.DataSet DataSource { get; private set; }
        public bool IsExportEnabled => SelectedYardItem != null;

    }
}
